(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{352:function(t,a,s){"use strict";s.r(a);var r=s(7),_=Object(r.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"进程通信"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程通信"}},[t._v("#")]),t._v(" 进程通信")]),t._v(" "),a("h2",{attrs:{id:"进程通信的概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程通信的概念"}},[t._v("#")]),t._v(" 进程通信的概念")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://static.pil0txia.com/picgo/IMG_20221031_135843.jpg",alt:"IMG_20221031_135843"}})]),t._v(" "),a("p",[t._v("任何时候都不能直接访问临界资源")]),t._v(" "),a("h2",{attrs:{id:"共享存储"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#共享存储"}},[t._v("#")]),t._v(" 共享存储")]),t._v(" "),a("p",[t._v("共享空间是临界区，P1 和 P2 互斥访问（PV 操作）")]),t._v(" "),a("p",[t._v("共享方式上，共享存储分为基于数据结构的共享（较为低级，速度慢限制多，例如开辟一个数组）和基于存储区的共享（高级通信方式，速度快，在内存中划出一块共享存储区，数据结构和存放位置都由进程控制，而不是 OS）")]),t._v(" "),a("h2",{attrs:{id:"管道通信"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#管道通信"}},[t._v("#")]),t._v(" 管道通信")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://static.pil0txia.com/picgo/IMG_20221031_140352.jpg",alt:"IMG_20221031_140352"}})]),t._v(" "),a("p",[t._v("从 P2 传回给 P1 时，必须再开辟一个管道，以实现全双工。")]),t._v(" "),a("h2",{attrs:{id:"消息传递"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#消息传递"}},[t._v("#")]),t._v(" 消息传递")]),t._v(" "),a("p",[a("a",{attrs:{href:"#%E5%86%85%E6%A0%B8"}},[t._v("回顾第一章消息传递等通信方式")])]),t._v(" "),a("blockquote",[a("h3",{attrs:{id:"直接通信方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#直接通信方式"}},[t._v("#")]),t._v(" 直接通信方式")]),t._v(" "),a("p",[t._v("发送进程发送消息之前，首先申请一个缓冲区，之后把消息复制到缓冲区，再通过发送原语把缓冲区发送给接受进程，缓冲区首先到达接受进程的消息缓冲队列队尾。接受进程通过接受原语读取队列消息，并复制到本地变量。")]),t._v(" "),a("h3",{attrs:{id:"间接通信方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#间接通信方式"}},[t._v("#")]),t._v(" 间接通信方式")]),t._v(" "),a("p",[t._v("也叫做信箱通信。发送进程发送的消息首先到达一个消息容器，接受进程再从消息容器中接受消息。")])])])}),[],!1,null,null,null);a.default=_.exports}}]);
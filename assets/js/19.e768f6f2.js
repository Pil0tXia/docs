(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{346:function(v,_,p){"use strict";p.r(_);var t=p(7),l=Object(t.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"作业2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#作业2"}},[v._v("#")]),v._v(" 作业 2")]),v._v(" "),_("blockquote",[_("p",[v._v("书面版进行了概括")])]),v._v(" "),_("ol",[_("li",[_("p",[v._v("设计现代 OS 的主要目标是什么？")]),v._v(" "),_("p",[v._v("方便性，有效性，可扩充性，开放性")])]),v._v(" "),_("li",[_("p",[v._v("试从交互性、及时性以及可靠性方面将分时系统与实时系统进行比较。")]),v._v(" "),_("p",[v._v("（1）及时性：实时信息处理系统对实时性的要求与分时系统类似，都是以人所能接受的等待时间来确定；而实时控制系统的及时性，是以控制对象所要求的开始截止时间或完成截止时间来确定的，一般为秒级到毫秒级，甚至有的要低于 100 微秒。")]),v._v(" "),_("p",[v._v("（2）交互性：实时信息处理系统具有交互性，但实时终端设备只是作为执行装置或咨询装置，人与系统的交互仅限于访问系统中某些特定的专用服务程序。分时系统的用户可以与系统进行人机交互，包括在终端上可以直接调试自己的程序，系统能向终端用户提供数据和资源共享等服务。")]),v._v(" "),_("p",[v._v("（3）可靠性：分时系统也要求系统可靠，但相比之下，实时系统则要求系统具有高度的可靠性。因为任何差错都可能带来巨大的经济损失，甚至是灾难性后果，所以在实时系统中，往往都采取了多级容错措施保障系统的安全性及数据的安全性。")])]),v._v(" "),_("li",[_("p",[v._v("在多道程序技术的 OS 环境下的资源共享与一般情况下的资源共享有何不同？对独占资源应采取何种共享方式？")]),v._v(" "),_("p",[v._v("（1）OS 环境下与一般情况下的资源共享间的不同点")]),v._v(" "),_("p",[v._v("①一般情况下的共享")]),v._v(" "),_("p",[v._v("一般情况下的共享只是说明某种资源能被大家使用，对于这样的资源共享方式，只要通过适当的安排，用户之间并不会产生对资源的竞争，因此资源管理是比较简单的。")]),v._v(" "),_("p",[v._v("②OS 环境下的共享")]),v._v(" "),_("p",[v._v("OS 环境下的资源共享或称为资源复用，是指系统中的资源可供内存中多个并发执行的进程共同使用。这里在宏观上既限定了时间（进程在内存期间），也限定了地点（内存）。对于这种资源共享方式，其管理就要复杂得多，因为系统中的资源少于多道程序需求的总和，会形成它们对共享资源的争夺。所以，系统必须对资源共享进行妥善管理。")]),v._v(" "),_("p",[v._v("（2）独占资源应采取的共享方式")]),v._v(" "),_("p",[v._v("对独占资源应采用互斥共享方式，该共享方式仅当占有该资源的进程访问并释放资源后，才允许另一进程对该资源进行访问。")])]),v._v(" "),_("li",[_("p",[v._v("什么是时分复用技术？举例说明它能提高资源利用率的根本原因是什么。")]),v._v(" "),_("p",[v._v("（1）时分复用技术的定义\n时分复用技术是将不同的信号相互交织在不同的时间段内，沿着同一个信道传输；在接收端再用某种方法，将各个时间段内的信号提取出来还原成原始信号的通信技术。这种技术可以在同一个信道上传输多路信号。\n（2）时分复用技术能提高资源利用率的根本原因\n时分复用技术能提高资源利用率的根本原因在于，它利用某设备为一用户服务的空闲时间，又转去为其他用户服务使设备得到最充分的利用。")])]),v._v(" "),_("li",[_("p",[v._v("何谓微内核技术？在基于微内核结构的 OS 中，应用了哪些新技术？在微内核中通常提供了哪些功能？")]),v._v(" "),_("p",[v._v("（1）把操作系统中更多的成分和功能放到更高的层次 (即用户模式) 中去运行，而留下一个尽量小的内核，用它来完成操作系统最基本的核心功能，称这种技术为微内核技术。")]),v._v(" "),_("p",[v._v("（2）面向对象的程序设计技术。")]),v._v(" "),_("p",[v._v("（3）在微内核中通常提供了进程 (线程) 管理、低级存储器管理、中断和陷入处理等功能。")])])])])}),[],!1,null,null,null);_.default=l.exports}}]);
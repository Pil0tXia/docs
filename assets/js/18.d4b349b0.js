(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{343:function(t,C,s){"use strict";s.r(C);var P=s(7),U=Object(P.a)({},(function(){var t=this,C=t._self._c;return C("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[C("h1",{attrs:{id:"补充资料"}},[C("a",{staticClass:"header-anchor",attrs:{href:"#补充资料"}},[t._v("#")]),t._v(" 补充资料")]),t._v(" "),C("p",[t._v("为什么说直到出现中断和通道技术后，多道程序概念才变为有用的？")]),t._v(" "),C("p",[t._v("采用多道程序设计减少了 CPU 时间的浪费，增加了系统吞吐量，提高了系统的效率。. 多道程序并发执行是指有的程序正在 CPU 上执行，而另一些程序正在 I/O 设备上进行传输，即通过 CPU 操作与外设传输在时间上的重叠减少 CPU 时间的浪费，并提高了系统的效率。实现 CPU 操作与外设传输在时间上的重叠必须有中断和通道技术支持，其原因如下：")]),t._v(" "),C("p",[t._v("（1）通道是一种控制一台或多台外部设备的硬件机构，它一旦被启动就独立与 CPU 运行，因而做到了输入输出操作与 CPU 并行工作。但早期 CPU 与通道的联络方法是由 CPU 向通道发出询问指令来了解通道工作是否完成。若未完成，则主机就循环询问直到通道工作结束为止。因此，这种询问方式是无法真正做到 CPU 与 I/O 设备并行工作的。")]),t._v(" "),C("p",[t._v("（2）在硬件上引入了中断技术。所谓中断，就是在输入输出结束时，或硬件发生某种故障时，由相应硬件（即中断机构）向 CPU 发出信号。这时 CPU 立即停下手头的工作而转向处理中断请求，道处理完中断后再继续原来手头的工作。因此，通道技术和中断技术结合起来就可实现 CPU 与 I/O 设备并行工作，即 CPU 启动通道传输数据后便去执行其他程序的计算工作，而通道则进行输入输出操作；当通道工作结束时，再通过中断机构向 CPU 发出中断请求，CPU 则暂停正在执行的操作，对出现的中断进行处理，处理完后则继续原来的工作。这样，就真正做到了 CPU 与 I/O 设备并行工作。此时，多道程序的概念才变为现实。")])])}),[],!1,null,null,null);C.default=U.exports}}]);